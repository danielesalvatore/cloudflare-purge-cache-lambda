service: cloudflare-purge-cache-lambda

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  profile: '${env:AWS_PROFILE}'
  stage: '${env:AWS_STAGE}'
  memorySize: '512'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'ssm:DescribeParameters'
        - 'ssm:GetParameters'
        - 'ssm:GetParameter'
      Resource:
        - 'arn:aws:ssm:eu-west-1:*:parameter/cloudflare-purge-cache-lambda*'
    - Effect: Allow
      Action:
        - 'kms:Decrypt'
      Resource: '*'
    # SQS
    - Effect: Allow
      Action:
        - 'sqs:*'
      Resource:
        - Fn::GetAtt: [PurgeRequestsAcceptedQueue, Arn]
    # SNS
    - Effect: 'Allow'
      Action:
        - 'sns:Publish'
      Resource: ${self:custom.topicArn}
  environment:
    PAGE_LOAD_TIMEOUT: 20000
    LOGGING: true
  vpc:
    logRetentionInDays: '14'
    usagePlan:
      quota:
        limit: '5000'
        offset: '2'
        period: MONTH
      throttle:
        burstLimit: '200'
        rateLimit: '100'
  package:
    exclude:
      - .git/**
      - layer/**
      - layer1/**
      - node_modules/**
      - node_modules/**/chrome-aws-lambda/**
  tags:
    ApplicationName: 'cloudflare-purge-cache-lambda'

resources:
  Resources:
    PurgeRequestsAcceptedQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: 'PurgeRequestsAcceptedQueue'
        #VisibilityTimeout: 300
    MonitoringTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.topicName}
        DisplayName: 'FAO.org - Cloudflare purge cache lambda'

functions:
  # Status
  status:
    handler: src/status.handler
    events:
      - http:
          path: status
          method: GET
          cors: true
          private: ${self:custom.private.${opt:stage, self:provider.stage}}
    environment:
      PURGE_REQUESTS_ACCEPTED_QUEUE_URL: !Ref PurgeRequestsAcceptedQueue
      PURGE_REQUESTS_ACCEPTED_QUEUE_NAME: PurgeRequestsAcceptedQueue

  api:
    handler: src/api.handler
    events:
      - http:
          method: POST
          path: '/'
          cors: true
          private: ${self:custom.private.${opt:stage, self:provider.stage}}
    environment:
      PURGE_REQUESTS_ACCEPTED_QUEUE_URL: !Ref PurgeRequestsAcceptedQueue
      PURGE_REQUESTS_ACCEPTED_QUEUE_NAME: PurgeRequestsAcceptedQueue
      MONITORING_TOPIC: ${self:custom.topicArn}

  browser:
    memorySize: '2048'
    handler: src/browser.handler
    timeout: 300
    events:
      - sqs:
          queueName: PurgeRequestsAcceptedQueue
          arn:
            Fn::GetAtt:
              - PurgeRequestsAcceptedQueue
              - Arn
    environment:
      PURGE_REQUESTS_ACCEPTED_QUEUE_URL: !Ref PurgeRequestsAcceptedQueue
      PURGE_REQUESTS_ACCEPTED_QUEUE_NAME: PurgeRequestsAcceptedQueue
      MONITORING_TOPIC: ${self:custom.topicArn}

plugins:
  - serverless-pseudo-parameters
  - serverless-cloudside-plugin
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-offline-dotenv
  - serverless-offline-sqs
  - serverless-offline

custom:
  private:
    Development: false
    Production: true
  webpack:
    webpackConfig: webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk
  serverless-offline:
    host: 0.0.0.0
  serverless-offline-sqs:
    autoCreate: true
    apiVersion: '2012-11-05'
    endpoint: http://0.0.0.0:9324
    region: eu-west-1
    skipCacheInvalidation: false
  topicName: CloudflarePurgeCacheMonitoringTopic
  topicArn:
    Fn::Join:
      - ''
      - - 'arn:aws:sns:'
        - Ref: AWS::Region
        - ':'
        - Ref: AWS::AccountId
        - ':'
        - Fn::GetAtt:
            - MonitoringTopic
            - TopicName
